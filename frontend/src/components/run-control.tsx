/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/FOPScghfias
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { ResponsiveLine } from "@nivo/line"
import { ResponsiveScatterPlot } from "@nivo/scatterplot"
import useAuthStore from '@/store/auth-store';
import { useRouter } from 'next/navigation';
import { useToast } from '@/components/ui/use-toast';
import { useMutation } from '@tanstack/react-query';
import { startRun, stopRun } from '@/lib/api';


export function RunControl() {

  const token = useAuthStore((state) => state.token);
  const clearToken = useAuthStore((state) => state.clearToken);
  const router = useRouter();

  const handleLogout = () => {
    clearToken();
    router.push('/');
  };

  const { toast } = useToast();

  const startMutation = useMutation({
    mutationFn: startRun,
    onSuccess: () => {
      toast({
        title: 'Run Started',
        description: 'The experiment run has been started successfully.',
      });
    },
    onError: () => {
      toast({
        title: 'Error',
        description: 'Failed to start the run. Please try again.',
        variant: 'destructive',
      });
    },
  });

  const stopMutation = useMutation({
    mutationFn: stopRun,
    onSuccess: () => {
      toast({
        title: 'Run Stopped',
        description: 'The experiment run has been stopped successfully.',
      });
    },
    onError: () => {
      toast({
        title: 'Error',
        description: 'Failed to stop the run. Please try again.',
        variant: 'destructive',
      });
    },
  });




  return (
    <div className="flex flex-col h-screen bg-background text-foreground">
      <header className="bg-card p-4 flex items-center justify-between shadow-sm">
        <div className="flex items-center gap-4">
          <MoonStarIcon className="w-6 h-6" />
          <h1 className="text-xl font-bold">LUNA Run Control Interface</h1>
        </div>
        <nav className="flex items-center gap-4">
          <Link href="#" className="text-sm font-medium hover:underline" prefetch={false}>
            Run Control
          </Link>
          <Link href="#" className="text-sm font-medium hover:underline" prefetch={false}>
            Metadata
          </Link>
          <Link href="#" className="text-sm font-medium hover:underline" prefetch={false}>
            Visualization
          </Link>
          <Button variant="secondary" onClick={handleLogout}>Logout</Button>

        </nav>
      </header>
      <main className="flex-1 grid grid-cols-2 gap-4 p-6">
        <section className="bg-card p-4 rounded-lg shadow-sm">
          <h2 className="text-lg font-bold mb-4">Run Control</h2>
          <div className="grid grid-cols-2 gap-4">
            <div className="flex flex-col gap-2">
              <Button onClick={() => startMutation.mutate()} className="w-full">Start</Button>
              <Button onClick={() => stopMutation.mutate() } variant="secondary" className="w-full">
                Stop
              </Button>
            </div>
            <div className="flex flex-col gap-2">
              <div className="bg-muted p-2 rounded-md flex items-center justify-center text-2xl font-bold">Running</div>
              <div className="bg-muted p-2 rounded-md flex items-center justify-center text-2xl font-bold">
                00:12:34
              </div>
            </div>
          </div>
          <Separator className="my-4" />
          <div className="grid grid-cols-2 gap-4">
            <div className="flex flex-col gap-2">
              <Label htmlFor="temperature">Board Parameter 1</Label>
              <Input id="temperature" type="number" defaultValue={25} />
            </div>
            <div className="flex flex-col gap-2">
              <Label htmlFor="pressure">Board Parameter 2</Label>
              <Input id="pressure" type="number" defaultValue={101.3} />
            </div>
            <div className="flex flex-col gap-2">
              <Label htmlFor="flow-rate">Board Parameter 3</Label>
              <Input id="flow-rate" type="number" defaultValue={2.5} />
            </div>
          </div>
        </section>
        <section className="bg-card p-4 rounded-lg shadow-sm">
          <h2 className="text-lg font-bold mb-4">Metadata</h2>
          <div className="grid grid-cols-2 gap-4">
            <div className="flex flex-col gap-2">
              <Label htmlFor="sample-id">Run Number</Label>
              <Input id="sample-id" type="text" defaultValue="123" />
            </div>
            <div className="flex flex-col gap-2">
              <Label htmlFor="operator">Operator</Label>
              <Input id="operator" type="text" defaultValue="Name" />
            </div>
            <div className="flex flex-col gap-2">
              <Label htmlFor="timestamp">Timestamp</Label>
              <Input id="timestamp" type="datetime-local" defaultValue="2023-06-30T12:34:56" />
            </div>
            <div className="flex flex-col gap-2">
              <Label htmlFor="notes">Notes</Label>
              <Textarea id="notes" rows={3} defaultValue="This is a sample note." />
            </div>
          </div>
          <Separator className="my-4" />
          <div className="flex justify-end gap-2">
            <Button variant="secondary">Export</Button>
            <Button>Save</Button>
          </div>
        </section>
        <section className="bg-card p-4 rounded-lg shadow-sm col-span-2">
          <h2 className="text-lg font-bold mb-4">Visualization</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <TimeseriesChart className="aspect-[16/9]" />
            </div>
            <div>
              <LineChart className="aspect-[16/9]" />
            </div>
            <div>
              <LineChart className="aspect-[16/9]" />
            </div>
            <div>
              <DotChart className="aspect-[16/9]" />
            </div>
          </div>
        </section>
      </main>
    </div>
  )
}
interface DotChartProps extends React.HTMLAttributes<HTMLDivElement> { }

function DotChart(props: DotChartProps) {

  return (
    <div {...props}>
      <ResponsiveScatterPlot
        data={[
          {
            id: "Desktop",
            data: [
              { x: "Jan", y: 43 },
              { x: "Feb", y: 137 },
              { x: "Mar", y: 61 },
              { x: "Apr", y: 145 },
              { x: "May", y: 26 },
              { x: "Jun", y: 154 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "Jan", y: 60 },
              { x: "Feb", y: 48 },
              { x: "Mar", y: 177 },
              { x: "Apr", y: 78 },
              { x: "May", y: 96 },
              { x: "Jun", y: 204 },
            ],
          },
        ]}
        margin={{ top: 10, right: 10, bottom: 40, left: 40 }}
        xScale={{ type: "point" }}
        yScale={{ type: "linear" }}
        blendMode="multiply"
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}

interface LineChartProps extends React.HTMLAttributes<HTMLDivElement> { }

function LineChart(props: LineChartProps) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "Jan", y: 43 },
              { x: "Feb", y: 137 },
              { x: "Mar", y: 61 },
              { x: "Apr", y: 145 },
              { x: "May", y: 26 },
              { x: "Jun", y: 154 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "Jan", y: 60 },
              { x: "Feb", y: 48 },
              { x: "Mar", y: 177 },
              { x: "Apr", y: 78 },
              { x: "May", y: 96 },
              { x: "Jun", y: 204 },
            ],
          },
        ]}
        margin={{ top: 10, right: 10, bottom: 40, left: 40 }}
        xScale={{
          type: "point",
        }}
        yScale={{
          type: "linear",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}


interface MoonStarIconProps extends React.SVGProps<SVGSVGElement> { }

function MoonStarIcon(props: MoonStarIconProps) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9" />
      <path d="M20 3v4" />
      <path d="M22 5h-4" />
    </svg>
  )
}
interface TimeseriesChartProps extends React.HTMLAttributes<HTMLDivElement> { }

function TimeseriesChart(props: TimeseriesChartProps) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "2018-01-01", y: 7 },
              { x: "2018-01-02", y: 5 },
              { x: "2018-01-03", y: 11 },
              { x: "2018-01-04", y: 9 },
              { x: "2018-01-05", y: 12 },
              { x: "2018-01-06", y: 16 },
              { x: "2018-01-07", y: 13 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "2018-01-01", y: 9 },
              { x: "2018-01-02", y: 8 },
              { x: "2018-01-03", y: 13 },
              { x: "2018-01-04", y: 6 },
              { x: "2018-01-05", y: 8 },
              { x: "2018-01-06", y: 14 },
              { x: "2018-01-07", y: 11 },
            ],
          },
        ]}
        margin={{ top: 10, right: 20, bottom: 40, left: 40 }}
        xScale={{
          type: "time",
          format: "%Y-%m-%d",
          useUTC: false,
          precision: "day",
        }}
        xFormat="time:%Y-%m-%d"
        yScale={{
          type: "linear",
          min: 0,
          max: "auto",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
          format: "%d",
          tickValues: "every 1 day",
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}
